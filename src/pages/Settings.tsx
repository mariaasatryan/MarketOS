import { useState, useEffect, useMemo } from 'react';
import { Plus, Trash2, Check, X, User, Key, Moon, Sun, LogOut, Globe, Edit3, Store } from 'lucide-react';
import { useI18n } from '../contexts/I18nContext';
import { useTheme } from '../contexts/ThemeContext';
import { useAuth } from '../contexts/AuthContext';
import { marketplaceService, type MarketplaceIntegration, type MarketplaceCode } from '../services/marketplaceService';
import { marketplacePreferencesService } from '../services/marketplacePreferencesService';
import { MarketplaceSelector } from '../components/MarketplaceSelector';
import { AutoSyncSettings } from '../components/AutoSyncSettings';
import { ThemeSettings } from '../components/ThemeSettings';
import { Marketplace } from '../types';

const mockEmployees = [
  { id: '1', name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', email: 'ivan@example.com', role: '–ú–µ–Ω–µ–¥–∂–µ—Ä', addedAt: '01.09.2024' },
];

const MP_LABEL: Record<MarketplaceCode, string> = {
  wildberries: 'Wildberries',
  ozon: 'Ozon',
  ym: '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç',
};

interface SettingsProps {
  isEditMode: boolean;
  setIsEditMode: (value: boolean) => void;
}

export function Settings({ isEditMode, setIsEditMode }: SettingsProps) {
  const { t, language, setLanguage } = useI18n();
  const { theme, setTheme } = useTheme();
  const { signOut, user } = useAuth();
  const [activeTab, setActiveTab] = useState<'integrations' | 'marketplaces' | 'team' | 'profile' | 'appearance' | 'sync'>('integrations');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
  const [integrations, setIntegrations] = useState<MarketplaceIntegration[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showAddModal, setShowAddModal] = useState(false);
  const [mp, setMp] = useState<MarketplaceCode>('wildberries');
  const [apiKey, setApiKey] = useState('');
  const [clientId, setClientId] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
  const [selectedMarketplaces, setSelectedMarketplaces] = useState<Marketplace[]>([]);
  const [marketplaceLoading, setMarketplaceLoading] = useState(false);

  const hasClientId = useMemo(() => mp === 'ozon' || mp === 'ym', [mp]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
  const loadSelectedMarketplaces = async () => {
    setMarketplaceLoading(true);
    try {
      const marketplaces = await marketplacePreferencesService.getUserPreferences();
      setSelectedMarketplaces(marketplaces);
    } catch (e: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤:', e);
    } finally {
      setMarketplaceLoading(false);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
  const saveSelectedMarketplaces = async (marketplaces: Marketplace[]) => {
    setMarketplaceLoading(true);
    try {
      await marketplacePreferencesService.saveUserPreferences(marketplaces);
      setSelectedMarketplaces(marketplaces);
    } catch (e: any) {
      setError(e.message ?? String(e));
    } finally {
      setMarketplaceLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
  const loadIntegrations = async () => {
    setError(null);
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–∑ Supabase
      await marketplaceService.refreshIntegrations();
      const data = await marketplaceService.listIntegrations();
      setIntegrations(data);
      console.log('üì¶ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
    } catch (e: any) {
      setError(e.message ?? String(e));
    }
  };

  useEffect(() => {
    if (activeTab === 'integrations') {
      loadIntegrations();
    } else if (activeTab === 'marketplaces') {
      loadSelectedMarketplaces();
    }
  }, [activeTab]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  const handleAddIntegration = async () => {
    if (!apiKey.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á');
      return;
    }
    setLoading(true);
    setError(null);
    try {
      await marketplaceService.addIntegration(mp, apiKey.trim(), clientId.trim() || undefined);
      setApiKey('');
      setClientId('');
      setShowAddModal(false);
      await loadIntegrations();
    } catch (e: any) {
      setError(e.message ?? String(e));
    } finally {
      setLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  const handleRemoveIntegration = async (id: string) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é?')) return;
    setLoading(true);
    setError(null);
    try {
      await marketplaceService.removeIntegration(id);
      await loadIntegrations();
    } catch (e: any) {
      setError(e.message ?? String(e));
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const handleTestConnection = async (item: MarketplaceIntegration) => {
    setLoading(true);
    setError(null);
    try {
      // –ú–æ–∫-–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 1000));
      alert(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${MP_LABEL[item.marketplace]} —É—Å–ø–µ—à–Ω–æ!`);
    } catch (e: any) {
      setError(e.message ?? String(e));
    } finally {
      setLoading(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const handleToggleActive = async (item: MarketplaceIntegration) => {
    setLoading(true);
    setError(null);
    try {
      await marketplaceService.updateIntegration(item.id, { is_active: !item.is_active });
      await loadIntegrations();
    } catch (e: any) {
      setError(e.message ?? String(e));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-slate-800 dark:text-white">{t('settings.title')}</h1>
        <p className="text-slate-600 dark:text-slate-400 mt-1">{t('settings.subtitle')}</p>
      </div>

      <div className="flex gap-2 border-b border-slate-200 dark:border-slate-700">
        <button
          onClick={() => setActiveTab('integrations')}
          className={`px-4 py-2 font-medium transition-colors relative ${
            activeTab === 'integrations'
              ? 'text-red-600 dark:text-red-400'
              : 'text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200'
          }`}
        >
          {t('settings.integrations')}
          {activeTab === 'integrations' && (
            <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-red-600 dark:bg-blue-400" />
          )}
        </button>
        <button
          onClick={() => setActiveTab('marketplaces')}
          className={`px-4 py-2 font-medium transition-colors relative ${
            activeTab === 'marketplaces'
              ? 'text-red-600 dark:text-red-400'
              : 'text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200'
          }`}
        >
          <div className="flex items-center gap-2">
            <Store size={16} />
            –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
          </div>
          {activeTab === 'marketplaces' && (
            <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-red-600 dark:bg-blue-400" />
          )}
        </button>
        <button
          onClick={() => setActiveTab('appearance')}
          className={`px-4 py-2 font-medium transition-colors relative ${
            activeTab === 'appearance'
              ? 'text-red-600 dark:text-red-400'
              : 'text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200'
          }`}
        >
          {t('settings.appearance')}
          {activeTab === 'appearance' && (
            <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-red-600 dark:bg-blue-400" />
          )}
        </button>
        <button
          onClick={() => setActiveTab('team')}
          className={`px-4 py-2 font-medium transition-colors relative ${
            activeTab === 'team'
              ? 'text-red-600 dark:text-red-400'
              : 'text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200'
          }`}
        >
          –ö–æ–º–∞–Ω–¥–∞
          {activeTab === 'team' && (
            <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-red-600 dark:bg-blue-400" />
          )}
        </button>
        <button
          onClick={() => setActiveTab('profile')}
          className={`px-4 py-2 font-medium transition-colors relative ${
            activeTab === 'profile'
              ? 'text-red-600 dark:text-red-400'
              : 'text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200'
          }`}
        >
          {t('settings.profile')}
          {activeTab === 'profile' && (
            <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-red-600 dark:bg-blue-400" />
          )}
        </button>
        <button
          onClick={() => setActiveTab('sync')}
          className={`px-4 py-2 font-medium transition-colors relative ${
            activeTab === 'sync'
              ? 'text-red-600 dark:text-red-400'
              : 'text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200'
          }`}
        >
          <div className="flex items-center gap-2">
            <Globe size={16} />
            –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          </div>
          {activeTab === 'sync' && (
            <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-red-600 dark:bg-blue-400" />
          )}
        </button>
      </div>

      {activeTab === 'appearance' && (
        <div className="space-y-6">
          <div className="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-sm border border-slate-200 dark:border-slate-700">
            <h2 className="text-xl font-semibold text-slate-800 dark:text-white mb-6">{t('settings.appearance')}</h2>

            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-3">
                  {t('settings.theme')}
                </label>
                <div className="flex gap-3">
                  <button
                    onClick={() => setTheme('light')}
                    className={`flex-1 flex items-center justify-center gap-3 px-6 py-4 rounded-lg border-2 transition-all ${
                      theme === 'light'
                        ? 'border-blue-600 bg-blue-50 dark:bg-blue-900/30'
                        : 'border-slate-300 dark:border-slate-600 hover:border-slate-400 dark:hover:border-slate-500'
                    }`}
                  >
                    <Sun size={24} className={theme === 'light' ? 'text-red-600' : 'text-slate-600 dark:text-slate-400'} />
                    <div className="text-left">
                      <div className={`font-medium ${theme === 'light' ? 'text-blue-700 dark:text-red-400' : 'text-slate-700 dark:text-slate-300'}`}>
                        {t('settings.light')}
                      </div>
                      <div className="text-xs text-slate-500 dark:text-slate-400">–°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω</div>
                    </div>
                  </button>

                  <button
                    onClick={() => setTheme('dark')}
                    className={`flex-1 flex items-center justify-center gap-3 px-6 py-4 rounded-lg border-2 transition-all ${
                      theme === 'dark'
                        ? 'border-blue-600 bg-blue-50 dark:bg-blue-900/30'
                        : 'border-slate-300 dark:border-slate-600 hover:border-slate-400 dark:hover:border-slate-500'
                    }`}
                  >
                    <Moon size={24} className={theme === 'dark' ? 'text-red-600 dark:text-red-400' : 'text-slate-600 dark:text-slate-400'} />
                    <div className="text-left">
                      <div className={`font-medium ${theme === 'dark' ? 'text-blue-700 dark:text-red-400' : 'text-slate-700 dark:text-slate-300'}`}>
                        {t('settings.dark')}
                      </div>
                      <div className="text-xs text-slate-500 dark:text-slate-400">–¢—ë–º–Ω—ã–π —Ñ–æ–Ω</div>
                    </div>
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-3">
                  {t('settings.language')}
                </label>
                <div className="flex gap-3">
                  <button
                    onClick={() => setLanguage('ru')}
                    className={`flex-1 flex items-center justify-center gap-3 px-6 py-4 rounded-lg border-2 transition-all ${
                      language === 'ru'
                        ? 'border-blue-600 bg-blue-50 dark:bg-blue-900/30'
                        : 'border-slate-300 dark:border-slate-600 hover:border-slate-400 dark:hover:border-slate-500'
                    }`}
                  >
                    <Globe size={24} className={language === 'ru' ? 'text-red-600 dark:text-red-400' : 'text-slate-600 dark:text-slate-400'} />
                    <div className="text-left">
                      <div className={`font-medium ${language === 'ru' ? 'text-blue-700 dark:text-red-400' : 'text-slate-700 dark:text-slate-300'}`}>
                        –†—É—Å—Å–∫–∏–π
                      </div>
                      <div className="text-xs text-slate-500 dark:text-slate-400">Russian</div>
                    </div>
                  </button>

                  <button
                    onClick={() => setLanguage('en')}
                    className={`flex-1 flex items-center justify-center gap-3 px-6 py-4 rounded-lg border-2 transition-all ${
                      language === 'en'
                        ? 'border-blue-600 bg-blue-50 dark:bg-blue-900/30'
                        : 'border-slate-300 dark:border-slate-600 hover:border-slate-400 dark:hover:border-slate-500'
                    }`}
                  >
                    <Globe size={24} className={language === 'en' ? 'text-red-600 dark:text-red-400' : 'text-slate-600 dark:text-slate-400'} />
                    <div className="text-left">
                      <div className={`font-medium ${language === 'en' ? 'text-blue-700 dark:text-red-400' : 'text-slate-700 dark:text-slate-300'}`}>
                        English
                      </div>
                      <div className="text-xs text-slate-500 dark:text-slate-400">–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</div>
                    </div>
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-3">
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                </label>
                <button
                  onClick={() => setIsEditMode(!isEditMode)}
                  className={`w-full flex items-center justify-center gap-2 px-6 py-4 rounded-lg font-medium transition-all ${
                    isEditMode
                      ? 'bg-red-600 text-white hover:bg-blue-700'
                      : 'bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-600'
                  }`}
                >
                  <Edit3 size={20} />
                  <span>{isEditMode ? '–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω' : '–í–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é'}</span>
                </button>
                {isEditMode && (
                  <p className="mt-2 text-sm text-slate-600 dark:text-slate-400">
                    –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
                  </p>
                )}
              </div>
            </div>
            
            <div className="mt-6">
              <ThemeSettings />
            </div>
          </div>
        </div>
      )}

      {activeTab === 'integrations' && (
        <div className="space-y-6">
          {error && (
            <div className="p-3 rounded-lg bg-red-50 text-red-700 border border-red-200">{error}</div>
          )}

          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-semibold text-slate-800 dark:text-white">{t('settings.connectedMarketplaces')}</h2>
              <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API-—Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</p>
            </div>
            <button
              onClick={() => setShowAddModal(true)}
              className="tech-button px-4 py-2 rounded-lg flex items-center gap-2 font-medium"
            >
              <Plus size={20} />
              {t('settings.addMarketplace')}
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {integrations.length === 0 ? (
              <div className="col-span-2 text-center py-8 text-slate-500">
                –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
              </div>
            ) : (
              integrations.map((integration) => (
                <div key={integration.id} className="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-sm border border-slate-200 dark:border-slate-700">
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-semibold text-slate-800 dark:text-white">{MP_LABEL[integration.marketplace]}</h3>
                      <p className="text-xs text-slate-500 dark:text-slate-400 mt-1">
                        –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {new Date(integration.created_at).toLocaleDateString('ru-RU')}
                      </p>
                    </div>
                    {integration.is_active ? (
                      <span className="flex items-center gap-1 text-xs font-medium text-green-600 bg-green-50 dark:bg-green-900/30 px-2 py-1 rounded-full">
                        <Check size={12} />
                        –ê–∫—Ç–∏–≤–Ω–æ
                      </span>
                    ) : (
                      <span className="flex items-center gap-1 text-xs font-medium text-red-600 bg-red-50 dark:bg-red-900/30 px-2 py-1 rounded-full">
                        <X size={12} />
                        –ù–µ–∞–∫—Ç–∏–≤–Ω–æ
                      </span>
                    )}
                  </div>
                  <div className="flex items-center gap-2 text-sm text-slate-600 dark:text-slate-400 mb-4">
                    <Key size={16} />
                    <span className="font-mono">{integration.api_token.substring(0, 12)}****</span>
                  </div>
                  <div className="flex gap-2">
                    <button 
                      onClick={() => handleTestConnection(integration)}
                      disabled={loading}
                      className="flex-1 bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 px-4 py-2 rounded-lg hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors text-sm font-medium disabled:opacity-50"
                    >
                      {t('settings.testConnection')}
                    </button>
                    <button 
                      onClick={() => handleToggleActive(integration)}
                      disabled={loading}
                      className="px-3 py-2 bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 rounded-lg hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors text-sm font-medium disabled:opacity-50"
                    >
                      {integration.is_active ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'}
                    </button>
                    <button 
                      onClick={() => handleRemoveIntegration(integration.id)}
                      disabled={loading}
                      className="p-2 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/30 rounded-lg transition-colors disabled:opacity-50"
                    >
                      <Trash2 size={18} />
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
          {showAddModal && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white dark:bg-slate-800 rounded-xl p-6 w-full max-w-md mx-4">
                <h2 className="text-xl font-semibold text-slate-800 dark:text-white mb-4">–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</h2>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                      –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
                    </label>
                    <select
                      value={mp}
                      onChange={(e) => setMp(e.target.value as MarketplaceCode)}
                      className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-900 text-slate-800 dark:text-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="wildberries">Wildberries</option>
                      <option value="ozon">Ozon</option>
                      <option value="ym">–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                      API-–∫–ª—é—á
                    </label>
                    <input
                      type="text"
                      value={apiKey}
                      onChange={(e) => setApiKey(e.target.value)}
                      className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-900 text-slate-800 dark:text-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á"
                    />
                  </div>

                  {hasClientId && (
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                        Client ID
                      </label>
                      <input
                        type="text"
                        value={clientId}
                        onChange={(e) => setClientId(e.target.value)}
                        className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-900 text-slate-800 dark:text-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ Client ID (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)"
                      />
                    </div>
                  )}
                </div>

                <div className="flex gap-3 mt-6">
                  <button
                    onClick={() => {
                      setShowAddModal(false);
                      setApiKey('');
                      setClientId('');
                    }}
                    className="flex-1 bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 px-4 py-2 rounded-lg hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors font-medium"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    onClick={handleAddIntegration}
                    disabled={loading || !apiKey.trim()}
                    className="flex-1 tech-button px-4 py-2 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {activeTab === 'marketplaces' && (
        <div className="space-y-6">
          <div className="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-sm border border-slate-200 dark:border-slate-700">
            <div className="mb-6">
              <h2 className="text-xl font-semibold text-slate-800 dark:text-white mb-2">
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏
              </h2>
              <p className="text-sm text-slate-600 dark:text-slate-400">
                –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.
              </p>
            </div>

            {marketplaceLoading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
              </div>
            ) : (
              <MarketplaceSelector
                key={language}
                selectedMarketplaces={selectedMarketplaces}
                onSelectionChange={saveSelectedMarketplaces}
                title=""
                description=""
                showDescription={false}
                className=""
              />
            )}

            {selectedMarketplaces.length > 0 && (
              <div className="mt-6 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
                <div className="flex items-center gap-2 text-green-700 dark:text-green-400">
                  <Check size={20} />
                  <span className="font-medium">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</span>
                </div>
                <p className="text-sm text-green-600 dark:text-green-400 mt-1">
                  –í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                </p>
              </div>
            )}
          </div>
        </div>
      )}

      {activeTab === 'team' && (
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-semibold text-slate-800 dark:text-white">–ö–æ–º–∞–Ω–¥–∞</h2>
              <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>
            </div>
            <button
              className="tech-button px-4 py-2 rounded-lg flex items-center gap-2 font-medium"
            >
              <Plus size={20} />
              –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            </button>
          </div>

          <div className="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden">
            <table className="w-full">
              <thead className="bg-slate-50 dark:bg-slate-900/50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">–†–æ–ª—å</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">–î–æ–±–∞–≤–ª–µ–Ω</th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-slate-200 dark:divide-slate-700">
                {mockEmployees.map((employee) => (
                  <tr key={employee.id} className="hover:bg-slate-50 dark:hover:bg-slate-700/50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="w-10 h-10 rounded-full bg-red-100 dark:bg-red-900/30 flex items-center justify-center text-red-600 dark:text-red-400 font-semibold">
                          {employee.name.charAt(0)}
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-slate-800 dark:text-white">{employee.name}</div>
                          <div className="text-xs text-slate-500 dark:text-slate-400">{employee.email}</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 py-1 text-xs font-medium bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 rounded-full">
                        {employee.role}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600 dark:text-slate-400">
                      {employee.addedAt}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button className="text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300">
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {activeTab === 'profile' && (
        <div className="space-y-6">
          <div className="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-sm border border-slate-200 dark:border-slate-700">
            <h2 className="text-xl font-semibold text-slate-800 dark:text-white mb-6">{t('settings.profile')}</h2>

            <div className="flex items-center gap-6 mb-6 pb-6 border-b border-slate-200 dark:border-slate-700">
              <div className="w-20 h-20 rounded-full bg-red-100 dark:bg-red-900/30 flex items-center justify-center text-red-600 dark:text-red-400 text-2xl font-semibold">
                <User size={32} />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-slate-800 dark:text-white">{user?.email}</h3>
                <p className="text-sm text-slate-600 dark:text-slate-400">–í–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞</p>
              </div>
            </div>

            <button
              onClick={signOut}
              className="w-full flex items-center justify-center gap-2 tech-button px-6 py-3 rounded-lg font-medium"
            >
              <LogOut size={20} />
              {t('settings.logout')}
            </button>
          </div>
        </div>
      )}

      {activeTab === 'sync' && (
        <div className="space-y-6">
          <AutoSyncSettings />
        </div>
      )}
    </div>
  );
}
