import { useState } from 'react';
import { RefreshCw, CheckCircle, XCircle, AlertTriangle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { marketplaceService } from '../services/marketplaceService';
import { RealMarketplaceService } from '../services/realMarketplaceService';

export function APITest() {
  const { user } = useAuth();
  const [testing, setTesting] = useState(false);
  const [results, setResults] = useState<any>(null);
  const [integrations, setIntegrations] = useState<any[]>([]);

  const testAPI = async () => {
    if (!user) return;
    
    setTesting(true);
    setResults(null);
    
    try {
      console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      const integrationsData = await marketplaceService.listIntegrations();
      setIntegrations(integrationsData);
      console.log('üìã –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', integrationsData);
      
      const testResults: any = {
        integrations: integrationsData,
        tests: []
      };
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
      for (const integration of integrationsData) {
        if (!integration.is_active) continue;
        
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º ${integration.marketplace}...`);
        
        const integrationTest = {
          marketplace: integration.marketplace,
          status: 'testing',
          results: {
            tokenValidation: null,
            products: null,
            orders: null,
            analytics: null,
            errors: []
          }
        };
        
        try {
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
          if (integration.marketplace === 'wildberries') {
            console.log('üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º WB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
            const connectionTest = await RealMarketplaceService.testWBConnection(integration.api_token);
            integrationTest.results.tokenValidation = {
              success: connectionTest.success,
              message: connectionTest.message,
              status: connectionTest.status,
              timestamp: connectionTest.timestamp
            };
            console.log('üîë WB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', connectionTest);
          }
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
          console.log('üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã...');
          const products = await RealMarketplaceService.getRealProductsData([integration]);
          integrationTest.results.products = {
            count: products.length,
            data: products.slice(0, 3) // –ü–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
          };
          console.log('üì¶ –¢–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã:', products.length);
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
          console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É...');
          const analytics = await RealMarketplaceService.getRealAnalyticsData([integration]);
          integrationTest.results.analytics = {
            count: analytics.length,
            data: analytics.slice(0, 3) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
          };
          console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', analytics.length);
          
          integrationTest.status = 'success';
          
        } catch (error: any) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${integration.marketplace}:`, error);
          integrationTest.status = 'error';
          integrationTest.results.errors.push({
            type: 'api_error',
            message: error.message,
            details: error
          });
        }
        
        testResults.tests.push(integrationTest);
      }
      
      setResults(testResults);
      console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', testResults);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      setResults({
        error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API',
        details: error
      });
    } finally {
      setTesting(false);
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success': return <CheckCircle className="text-green-500" size={20} />;
      case 'error': return <XCircle className="text-red-500" size={20} />;
      case 'testing': return <RefreshCw className="text-blue-500 animate-spin" size={20} />;
      default: return <AlertTriangle className="text-yellow-500" size={20} />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'success': return 'bg-green-50 border-green-200 text-green-800';
      case 'error': return 'bg-red-50 border-red-200 text-red-800';
      case 'testing': return 'bg-blue-50 border-blue-200 text-blue-800';
      default: return 'bg-yellow-50 border-yellow-200 text-yellow-800';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-slate-800 dark:text-white">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API</h1>
          <p className="text-slate-600 dark:text-slate-400 mt-1">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏</p>
        </div>
        <button
          onClick={testAPI}
          disabled={testing}
          className="flex items-center gap-2 tech-button px-6 py-3 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <RefreshCw size={20} className={testing ? 'animate-spin' : ''} />
          {testing ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç'}
        </button>
      </div>

      {results && (
        <div className="space-y-6">
          {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="bg-white dark:bg-slate-800 rounded-xl p-6 border border-slate-200 dark:border-slate-700">
            <h3 className="text-lg font-semibold text-slate-800 dark:text-white mb-4">
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="text-center">
                <div className="text-2xl font-bold text-slate-800 dark:text-white">
                  {results.integrations?.length || 0}
                </div>
                <div className="text-sm text-slate-600 dark:text-slate-400">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</div>
              </div>
              
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                  {results.tests?.filter((t: any) => t.status === 'success').length || 0}
                </div>
                <div className="text-sm text-slate-600 dark:text-slate-400">–£—Å–ø–µ—à–Ω—ã—Ö</div>
              </div>
              
              <div className="text-center">
                <div className="text-2xl font-bold text-red-600 dark:text-red-400">
                  {results.tests?.filter((t: any) => t.status === 'error').length || 0}
                </div>
                <div className="text-sm text-slate-600 dark:text-slate-400">–û—à–∏–±–æ–∫</div>
              </div>
            </div>
          </div>

          {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          {results.tests?.map((test: any, index: number) => (
            <div key={index} className="bg-white dark:bg-slate-800 rounded-xl p-6 border border-slate-200 dark:border-slate-700">
              <div className="flex items-center gap-3 mb-4">
                {getStatusIcon(test.status)}
                <h4 className="text-lg font-semibold text-slate-800 dark:text-white">
                  {test.marketplace.toUpperCase()}
                </h4>
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(test.status)}`}>
                  {test.status === 'success' ? '–£—Å–ø–µ—à–Ω–æ' : 
                   test.status === 'error' ? '–û—à–∏–±–∫–∞' : 
                   test.status === 'testing' ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                </span>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* –¢–æ–∫–µ–Ω */}
                <div className="bg-slate-50 dark:bg-slate-700 rounded-lg p-4">
                  <h5 className="font-medium text-slate-800 dark:text-white mb-2">–¢–æ–∫–µ–Ω</h5>
                  <div className="flex items-center gap-2">
                    {test.results.tokenValidation !== null ? (
                      test.results.tokenValidation.success ? (
                        <CheckCircle className="text-green-500" size={16} />
                      ) : (
                        <XCircle className="text-red-500" size={16} />
                      )
                    ) : (
                      <AlertTriangle className="text-yellow-500" size={16} />
                    )}
                    <div className="text-sm text-slate-600 dark:text-slate-400">
                      {test.results.tokenValidation !== null ? (
                        <div>
                          <div className="font-medium">
                            {test.results.tokenValidation.success ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
                          </div>
                          <div className="text-xs text-slate-500">
                            {test.results.tokenValidation.message}
                          </div>
                          {test.results.tokenValidation.status && (
                            <div className="text-xs text-slate-500">
                              –°—Ç–∞—Ç—É—Å: {test.results.tokenValidation.status}
                            </div>
                          )}
                        </div>
                      ) : (
                        '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è'
                      )}
                    </div>
                  </div>
                </div>

                {/* –¢–æ–≤–∞—Ä—ã */}
                <div className="bg-slate-50 dark:bg-slate-700 rounded-lg p-4">
                  <h5 className="font-medium text-slate-800 dark:text-white mb-2">–¢–æ–≤–∞—Ä—ã</h5>
                  <div className="text-sm text-slate-600 dark:text-slate-400">
                    {test.results.products ? `${test.results.products.count} —Ç–æ–≤–∞—Ä–æ–≤` : '–ù–µ –ø–æ–ª—É—á–µ–Ω—ã'}
                  </div>
                </div>

                {/* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
                <div className="bg-slate-50 dark:bg-slate-700 rounded-lg p-4">
                  <h5 className="font-medium text-slate-800 dark:text-white mb-2">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h5>
                  <div className="text-sm text-slate-600 dark:text-slate-400">
                    {test.results.analytics ? `${test.results.analytics.count} –∑–∞–ø–∏—Å–µ–π` : '–ù–µ –ø–æ–ª—É—á–µ–Ω–∞'}
                  </div>
                </div>

                {/* –û—à–∏–±–∫–∏ */}
                <div className="bg-slate-50 dark:bg-slate-700 rounded-lg p-4">
                  <h5 className="font-medium text-slate-800 dark:text-white mb-2">–û—à–∏–±–∫–∏</h5>
                  <div className="text-sm text-slate-600 dark:text-slate-400">
                    {test.results.errors.length > 0 ? `${test.results.errors.length} –æ—à–∏–±–æ–∫` : '–ù–µ—Ç –æ—à–∏–±–æ–∫'}
                  </div>
                </div>
              </div>

              {/* –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ */}
              {test.results.errors.length > 0 && (
                <div className="mt-4">
                  <h6 className="font-medium text-red-600 dark:text-red-400 mb-2">–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</h6>
                  <div className="space-y-2">
                    {test.results.errors.map((error: any, errorIndex: number) => (
                      <div key={errorIndex} className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3">
                        <div className="text-sm text-red-800 dark:text-red-300">
                          <strong>{error.type}:</strong> {error.message}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {!results && !testing && (
        <div className="bg-white dark:bg-slate-800 rounded-xl p-12 text-center border border-slate-200 dark:border-slate-700">
          <RefreshCw className="mx-auto text-slate-300 dark:text-slate-600 mb-4" size={64} />
          <h3 className="text-xl font-semibold text-slate-800 dark:text-white mb-2">–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</h3>
          <p className="text-slate-600 dark:text-slate-400">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API</p>
        </div>
      )}
    </div>
  );
}
