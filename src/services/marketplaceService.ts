// src/services/marketplaceService.ts
import { supabase } from '../lib/supabase';
import { envConfig } from '../utils/env';
import { validateApiKey, sanitizeInput } from '../utils/validation';

export type MarketplaceCode = 'wildberries' | 'ozon' | 'ym';

export interface MarketplaceIntegration {
  id: string;
  user_id: string;
  marketplace: MarketplaceCode;
  api_token: string;
  client_id?: string | null;
  is_active: boolean;
  last_sync_at?: string | null;
  last_sync_status?: 'success' | 'error' | 'pending' | null;
  error_message?: string | null;
  created_at: string;
}

export interface ServiceError {
  message: string;
  code?: string;
  details?: unknown;
}

class MarketplaceService {
  private integrations: MarketplaceIntegration[] = [];

  constructor() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.initializeIntegrations();
  }

  private async initializeIntegrations() {
    await this.loadIntegrationsFromStorage();
  }

  private async loadIntegrationsFromStorage() {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Supabase
      await this.loadIntegrationsFromSupabase();
      
      // –ï—Å–ª–∏ –≤ Supabase –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
      if (this.integrations.length === 0) {
        const stored = typeof window !== 'undefined' ? localStorage.getItem('marketplace_integrations') : null;
        if (stored) {
          this.integrations = JSON.parse(stored);
          console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–∑ localStorage:', this.integrations);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:', error);
      this.integrations = [];
    }
  }

  private async loadIntegrationsFromSupabase() {
    try {
      console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–∑ Supabase...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ Supabase');
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data, error } = await supabase
        .from('marketplace_integrations')
        .select('*')
        .eq('user_id', user.id);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–∑ Supabase:', error);
        return;
      }

      if (data && data.length > 0) {
        this.integrations = data;
        console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase:', this.integrations);
      } else {
        console.log('üì¶ –ù–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –≤ Supabase');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase:', error);
    }
  }

  private async saveIntegrationsToStorage() {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      if (typeof window !== 'undefined') {
        localStorage.setItem('marketplace_integrations', JSON.stringify(this.integrations));
      }
      console.log('üíæ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', this.integrations);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      await this.saveIntegrationsToSupabase();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:', error);
    }
  }

  private async saveIntegrationsToSupabase() {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –≤ Supabase...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase');
        return;
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: deleteError } = await supabase
        .from('marketplace_integrations')
        .delete()
        .eq('user_id', user.id);

      if (deleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:', deleteError);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      if (this.integrations.length > 0) {
        const integrationsToSave = this.integrations.map(integration => ({
          ...integration,
          user_id: user.id,
          created_at: new Date().toISOString()
        }));

        const { error: insertError } = await supabase
          .from('marketplace_integrations')
          .insert(integrationsToSave);

        if (insertError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –≤ Supabase:', insertError);
        } else {
          console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
    }
  }

  private async getAuthHeaders() {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        // –ú–æ–∫-—Ä–µ–∂–∏–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer mock-token',
          'apikey': envConfig.VITE_SUPABASE_ANON_KEY,
        };
      }

      return {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`,
        'apikey': SUPABASE_ANON_KEY,
      };
    } catch {
      // –ú–æ–∫-—Ä–µ–∂–∏–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer mock-token',
        'apikey': SUPABASE_ANON_KEY,
      };
    }
  }

  private base(path = '') {
    return `${envConfig.VITE_SUPABASE_URL}/functions/v1${path}`;
  }

  async listIntegrations(): Promise<MarketplaceIntegration[]> {
    try {
      const headers = await this.getAuthHeaders();
      const res = await fetch(this.base('/marketplace-tokens'), { headers });
      if (!res.ok) throw new Error(await res.text());
      return res.json();
    } catch {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–∑ Supabase, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      await this.loadIntegrationsFromSupabase();
      return this.integrations;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–∑ Supabase
  async refreshIntegrations(): Promise<void> {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–∑ Supabase...');
    await this.loadIntegrationsFromSupabase();
  }

  async addIntegration(marketplace: MarketplaceCode, apiKey: string, clientId?: string): Promise<MarketplaceIntegration> {
    // Validate inputs
    if (!validateApiKey(apiKey)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á');
    }

    const sanitizedApiKey = sanitizeInput(apiKey);
    const sanitizedClientId = clientId ? sanitizeInput(clientId) : undefined;

    try {
      const headers = await this.getAuthHeaders();
      const res = await fetch(this.base('/marketplace-tokens'), {
        method: 'POST',
        headers,
        body: JSON.stringify({ 
          marketplace, 
          api_key: sanitizedApiKey, 
          client_id: sanitizedClientId ?? null 
        }),
      });
      if (!res.ok) throw new Error(await res.text());
      return res.json();
    } catch {
      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const newIntegration: MarketplaceIntegration = {
        id: `mock-${Date.now()}`,
        user_id: 'mock-user',
        marketplace,
        api_token: sanitizedApiKey,
        client_id: sanitizedClientId || null,
        is_active: true,
        last_sync_at: null,
        last_sync_status: null,
        error_message: null,
        created_at: new Date().toISOString(),
      };
      
      this.integrations.push(newIntegration);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∏ Supabase
      await this.saveIntegrationsToStorage();
      console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', newIntegration);
      return newIntegration;
    }
  }

  async updateIntegration(id: string, patch: Partial<Pick<MarketplaceIntegration,
    'api_token' | 'client_id' | 'is_active' | 'last_sync_at' | 'last_sync_status' | 'error_message'
  >>): Promise<MarketplaceIntegration> {
    try {
      const headers = await this.getAuthHeaders();
      const url = new URL(this.base('/marketplace-tokens'));
      url.searchParams.set('id', id);
      const res = await fetch(url.toString(), {
        method: 'PUT',
        headers,
        body: JSON.stringify(patch),
      });
      if (!res.ok) throw new Error(await res.text());
      return res.json();
    } catch {
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
      const index = this.integrations.findIndex(i => i.id === id);
      if (index !== -1) {
        this.integrations[index] = { ...this.integrations[index], ...patch };
        return this.integrations[index];
      }
      throw new Error('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }

  async removeIntegration(id: string): Promise<void> {
    try {
      const headers = await this.getAuthHeaders();
      const url = new URL(this.base('/marketplace-tokens'));
      url.searchParams.set('id', id);
      const res = await fetch(url.toString(), { method: 'DELETE', headers });
      if (!res.ok) throw new Error(await res.text());
    } catch {
      // –£–¥–∞–ª—è–µ–º –º–æ–∫-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
      this.integrations = this.integrations.filter(i => i.id !== id);
    }
  }

  /** –¢—Ä–∏–≥–µ—Ä–∏–º edge-—Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */
  async syncIntegrationNow(id: string): Promise<{ ok?: boolean; error?: string }> {
    try {
      const headers = await this.getAuthHeaders();
      const res = await fetch(this.base('/sync-marketplace-data'), {
        method: 'POST',
        headers,
        body: JSON.stringify({ integration_id: id }),
      });
      if (!res.ok) throw new Error(await res.text());
      return res.json();
    } catch {
      // –ú–æ–∫-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      const integration = this.integrations.find(i => i.id === id);
      if (integration) {
        integration.last_sync_at = new Date().toISOString();
        integration.last_sync_status = 'success';
        integration.error_message = null;
      }
      return { ok: true };
    }
  }
}

export const marketplaceService = new MarketplaceService();