import { Telegraf, Context } from 'telegraf';
import { PrismaClient } from '@prisma/client';
import { AnalyticsService } from '../services/analyticsService';
import { ETLService } from '../services/etlService';
import { Marketplace } from '@prisma/client';

export class TelegramBot {
  private bot: Telegraf;
  private prisma: PrismaClient;
  private analyticsService: AnalyticsService;
  private etlService: ETLService;

  constructor(token: string) {
    this.bot = new Telegraf(token);
    this.prisma = new PrismaClient();
    this.analyticsService = new AnalyticsService(this.prisma);
    this.etlService = new ETLService(this.prisma);
    
    this.setupCommands();
  }

  private setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      const telegramId = ctx.from?.id.toString();
      if (!telegramId) return;

      const user = await this.prisma.telegramUser.findUnique({
        where: { telegramId },
        include: { User: true }
      });

      if (user) {
        await ctx.reply(
          `–ü—Ä–∏–≤–µ—Ç, ${user.User.name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã\n\n` +
          `–Ø –±–æ—Ç MarketOS - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.\n\n` +
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
          `/kpi_today - KPI –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n` +
          `/top_loss - –¢–æ–ø —É–±—ã—Ç–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n` +
          `/dead_stock - –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n` +
          `/ads_alerts - –†–µ–∫–ª–∞–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n` +
          `/seo_status - SEO —Å—Ç–∞—Ç—É—Å\n` +
          `/help - –ü–æ–º–æ—â—å`
        );
      } else {
        await ctx.reply(
          '–ü—Ä–∏–≤–µ—Ç! üëã\n\n' +
          '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ MarketOS.\n' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ Telegram –∞–∫–∫–∞—É–Ω—Ç.'
        );
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(async (ctx) => {
      await ctx.reply(
        'üìä MarketOS Bot - –ö–æ–º–∞–Ω–¥—ã:\n\n' +
        '/kpi_today - –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n' +
        '/top_loss - –¢–æ–≤–∞—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –ø–æ—Ç–µ—Ä—è–º–∏\n' +
        '/dead_stock - –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n' +
        '/ads_alerts - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–µ–∫–ª–∞–º–µ\n' +
        '/seo_status - –°—Ç–∞—Ç—É—Å SEO –ø–æ–∑–∏—Ü–∏–π\n' +
        '/sync - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n' +
        '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n' +
        'üí° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π.'
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /kpi_today
    this.bot.command('kpi_today', async (ctx) => {
      try {
        const user = await this.getUserByTelegramId(ctx);
        if (!user) return;

        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);

        const kpiData = await this.analyticsService.getKPIData(
          user.userId,
          today,
          tomorrow
        );

        const message = 
          `üìä KPI –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n` +
          `üí∞ –í—ã—Ä—É—á–∫–∞: ${this.formatCurrency(kpiData.revenue)}\n` +
          `üì¶ –ó–∞–∫–∞–∑—ã: ${kpiData.orders}\n` +
          `üíµ –ü—Ä–∏–±—ã–ª—å: ${this.formatCurrency(kpiData.profit)}\n` +
          `üìà ROAS: ${kpiData.roas.toFixed(2)}\n` +
          `üìä –ú–∞—Ä–∂–∞: ${(kpiData.margin * 100).toFixed(1)}%\n` +
          `üì¶ –û—Å—Ç–∞—Ç–∫–∏: ${kpiData.stock} —à—Ç.\n` +
          `üí∏ –†–µ–∫–ª–∞–º–∞: ${this.formatCurrency(kpiData.adsSpend)}\n` +
          `üè™ –ö–æ–º–∏—Å—Å–∏–∏: ${this.formatCurrency(kpiData.fees)}`;

        await ctx.reply(message);
      } catch (error) {
        console.error('Error in kpi_today command:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI –¥–∞–Ω–Ω—ã—Ö');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /top_loss
    this.bot.command('top_loss', async (ctx) => {
      try {
        const user = await this.getUserByTelegramId(ctx);
        if (!user) return;

        const fromDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
        const toDate = new Date();

        const hiddenLossData = await this.analyticsService.getHiddenLossData(
          user.userId,
          fromDate,
          toDate
        );

        const topLosses = hiddenLossData.slice(0, 5);

        if (topLosses.length === 0) {
          await ctx.reply('‚úÖ –°–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ç–µ—Ä—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
          return;
        }

        let message = 'üîç –¢–æ–ø —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ç–µ—Ä—å:\n\n';
        
        topLosses.forEach((loss, index) => {
          message += 
            `${index + 1}. ${loss.sku}\n` +
            `üí∏ –ü–æ—Ç–µ—Ä–∏: ${this.formatCurrency(loss.totalHiddenLoss)}\n` +
            `üìä –í–ª–∏—è–Ω–∏–µ: ${(loss.profitImpact * 100).toFixed(1)}%\n\n`;
        });

        await ctx.reply(message);
      } catch (error) {
        console.error('Error in top_loss command:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç–µ—Ä—è—Ö');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /dead_stock
    this.bot.command('dead_stock', async (ctx) => {
      try {
        const user = await this.getUserByTelegramId(ctx);
        if (!user) return;

        const deadStockData = await this.analyticsService.getDeadStockData(
          user.userId,
          30
        );

        const deadStock = deadStockData.filter(item => item.isDeadStock).slice(0, 5);

        if (deadStock.length === 0) {
          await ctx.reply('‚úÖ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          return;
        }

        let message = 'üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n';
        
        deadStock.forEach((item, index) => {
          message += 
            `${index + 1}. ${item.sku}\n` +
            `üì¶ –û—Å—Ç–∞—Ç–æ–∫: ${item.stock} —à—Ç.\n` +
            `‚è∞ –î–Ω–µ–π –±–µ–∑ –ø—Ä–æ–¥–∞–∂: ${item.daysSinceLastSale}\n` +
            `üìä –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å: ${(item.sellThrough * 100).toFixed(1)}%\n\n`;
        });

        await ctx.reply(message);
      } catch (error) {
        console.error('Error in dead_stock command:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /ads_alerts
    this.bot.command('ads_alerts', async (ctx) => {
      try {
        const user = await this.getUserByTelegramId(ctx);
        if (!user) return;

        const alerts = await this.prisma.alert.findMany({
          where: {
            integration: { userId: user.userId },
            type: { in: ['LOW_ROAS', 'CAMPAIGN_CONFLICT'] },
            resolved: false
          },
          include: { product: true, integration: true },
          orderBy: { createdAt: 'desc' },
          take: 5
        });

        if (alerts.length === 0) {
          await ctx.reply('‚úÖ –†–µ–∫–ª–∞–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç');
          return;
        }

        let message = 'üì¢ –†–µ–∫–ª–∞–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n';
        
        alerts.forEach((alert, index) => {
          const emoji = this.getAlertEmoji(alert.severity);
          message += 
            `${emoji} ${alert.message}\n` +
            `üìÖ ${alert.date.toLocaleDateString('ru-RU')}\n\n`;
        });

        await ctx.reply(message);
      } catch (error) {
        console.error('Error in ads_alerts command:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /seo_status
    this.bot.command('seo_status', async (ctx) => {
      try {
        const user = await this.getUserByTelegramId(ctx);
        if (!user) return;

        const fromDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        const toDate = new Date();

        const seoData = await this.analyticsService.getSEOData(
          user.userId,
          fromDate,
          toDate
        );

        const topSeo = seoData.slice(0, 5);

        if (topSeo.length === 0) {
          await ctx.reply('üìä SEO –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç');
          return;
        }

        let message = 'üîç SEO —Å—Ç–∞—Ç—É—Å:\n\n';
        
        topSeo.forEach((item, index) => {
          message += 
            `${index + 1}. ${item.sku}\n` +
            `üìç –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: ${item.avgPosition}\n` +
            `üîç –ó–∞–ø—Ä–æ—Å–æ–≤: ${item.totalQueries}\n` +
            `üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${(item.avgConversion * 100).toFixed(1)}%\n\n`;
        });

        await ctx.reply(message);
      } catch (error) {
        console.error('Error in seo_status command:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SEO –¥–∞–Ω–Ω—ã—Ö');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /sync
    this.bot.command('sync', async (ctx) => {
      try {
        const user = await this.getUserByTelegramId(ctx);
        if (!user) return;

        await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');

        await this.etlService.syncAllIntegrations();

        await ctx.reply('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (error) {
        console.error('Error in sync command:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    this.bot.on('text', async (ctx) => {
      await ctx.reply(
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
      );
    });
  }

  private async getUserByTelegramId(ctx: Context): Promise<any> {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return null;

    return await this.prisma.telegramUser.findUnique({
      where: { telegramId },
      include: { User: true }
    });
  }

  private formatCurrency(amount: number): string {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(amount);
  }

  private getAlertEmoji(severity: string): string {
    switch (severity) {
      case 'CRITICAL': return 'üö®';
      case 'HIGH': return '‚ö†Ô∏è';
      case 'MEDIUM': return 'üî∂';
      case 'LOW': return '‚ÑπÔ∏è';
      default: return 'üì¢';
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendAlertNotification(userId: string, alert: any): Promise<void> {
    try {
      const telegramUser = await this.prisma.telegramUser.findFirst({
        where: { 
          userId,
          isActive: true 
        }
      });

      if (!telegramUser) return;

      const emoji = this.getAlertEmoji(alert.severity);
      const message = `${emoji} ${alert.message}`;

      await this.bot.telegram.sendMessage(telegramUser.telegramId, message);
    } catch (error) {
      console.error('Error sending alert notification:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  async sendDailyReport(userId: string): Promise<void> {
    try {
      const telegramUser = await this.prisma.telegramUser.findFirst({
        where: { 
          userId,
          isActive: true 
        }
      });

      if (!telegramUser) return;

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      const kpiData = await this.analyticsService.getKPIData(
        userId,
        today,
        tomorrow
      );

      const message = 
        `üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç MarketOS\n\n` +
        `üí∞ –í—ã—Ä—É—á–∫–∞: ${this.formatCurrency(kpiData.revenue)}\n` +
        `üì¶ –ó–∞–∫–∞–∑—ã: ${kpiData.orders}\n` +
        `üíµ –ü—Ä–∏–±—ã–ª—å: ${this.formatCurrency(kpiData.profit)}\n` +
        `üìà ROAS: ${kpiData.roas.toFixed(2)}\n` +
        `üìä –ú–∞—Ä–∂–∞: ${(kpiData.margin * 100).toFixed(1)}%`;

      await this.bot.telegram.sendMessage(telegramUser.telegramId, message);
    } catch (error) {
      console.error('Error sending daily report:', error);
    }
  }

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  async start(): Promise<void> {
    try {
      await this.bot.launch();
      console.log('Telegram bot started');
    } catch (error) {
      console.error('Error starting Telegram bot:', error);
      throw error;
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  async stop(): Promise<void> {
    try {
      await this.bot.stop();
      console.log('Telegram bot stopped');
    } catch (error) {
      console.error('Error stopping Telegram bot:', error);
      throw error;
    }
  }
}
